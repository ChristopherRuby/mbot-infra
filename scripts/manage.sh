#!/bin/bash
# Script de gestion pour l'infrastructure Terraform MBot

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
TERRAFORM_DIR="$SCRIPT_DIR/../environments/prod"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fonction pour v√©rifier que Terraform est configur√©
check_terraform() {
    if ! command -v terraform &> /dev/null; then
        echo -e "${RED}‚ùå Terraform non trouv√©${NC}"
        echo "Installez Terraform: https://terraform.io/downloads"
        exit 1
    fi
    
    if [ ! -f "$TERRAFORM_DIR/terraform.tfstate" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  √âtat Terraform non trouv√©${NC}"
        echo "D√©ployez d'abord votre infrastructure avec 'terraform apply'"
        return 1
    fi
    
    return 0
}

# Fonction pour obtenir l'ID de l'instance depuis Terraform
get_instance_id() {
    cd "$TERRAFORM_DIR"
    INSTANCE_ID=$(terraform output -raw instance_id 2>/dev/null)
    
    if [ $? -ne 0 ] || [ -z "$INSTANCE_ID" ]; then
        echo -e "${RED}‚ùå Impossible de r√©cup√©rer l'Instance ID depuis Terraform${NC}"
        return 1
    fi
    
    echo "$INSTANCE_ID"
    return 0
}

# Fonction pour obtenir l'IP publique depuis Terraform
get_public_ip() {
    cd "$TERRAFORM_DIR"
    PUBLIC_IP=$(terraform output -raw instance_public_ip 2>/dev/null)
    
    if [ $? -ne 0 ]; then
        return 1
    fi
    
    echo "$PUBLIC_IP"
    return 0
}

# Fonction pour v√©rifier l'√©tat de l'instance
check_instance_status() {
    echo -e "${BLUE}üîç √âtat de l'infrastructure${NC}"
    echo "=========================="
    
    if ! check_terraform; then
        return 1
    fi
    
    INSTANCE_ID=$(get_instance_id)
    if [ $? -ne 0 ]; then
        return 1
    fi
    
    echo "üÜî Instance ID: $INSTANCE_ID"
    
    # √âtat de l'instance
    STATUS=$(aws ec2 describe-instances \
        --instance-ids $INSTANCE_ID \
        --query 'Reservations[0].Instances[0].State.Name' \
        --output text 2>/dev/null)
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Erreur lors de la r√©cup√©ration de l'√©tat${NC}"
        return 1
    fi
    
    PUBLIC_IP=$(get_public_ip)
    
    case $STATUS in
        "running")
            echo -e "${GREEN}‚úÖ Instance: ACTIVE${NC}"
            if [ $? -eq 0 ] && [ -n "$PUBLIC_IP" ]; then
                echo -e "${GREEN}üåê IP Publique: $PUBLIC_IP${NC}"
                echo -e "${GREEN}üé¨ Application: http://$PUBLIC_IP${NC}"
            fi
            return 0
            ;;
        "stopped")
            echo -e "${YELLOW}üõë Instance: ARR√äT√âE${NC}"
            return 1
            ;;
        "stopping")
            echo -e "${YELLOW}‚è≥ Instance: EN COURS D'ARR√äT${NC}"
            return 1
            ;;
        "pending")
            echo -e "${YELLOW}‚è≥ Instance: EN D√âMARRAGE${NC}"
            return 1
            ;;
        *)
            echo -e "${RED}‚ùì Instance: √âtat inconnu ($STATUS)${NC}"
            return 1
            ;;
    esac
}

# Fonction pour d√©marrer l'instance
start_instance() {
    echo -e "${GREEN}üöÄ D√©marrage de l'instance${NC}"
    echo "========================="
    
    if ! check_terraform; then
        return 1
    fi
    
    INSTANCE_ID=$(get_instance_id)
    if [ $? -ne 0 ]; then
        return 1
    fi
    
    echo "üîÑ D√©marrage en cours..."
    aws ec2 start-instances --instance-ids $INSTANCE_ID >/dev/null
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Commande de d√©marrage envoy√©e${NC}"
        echo -e "${BLUE}‚è≥ Attente du d√©marrage complet...${NC}"
        
        aws ec2 wait instance-running --instance-ids $INSTANCE_ID
        
        # R√©cup√©rer la nouvelle IP
        PUBLIC_IP=$(get_public_ip)
        if [ $? -eq 0 ] && [ -n "$PUBLIC_IP" ]; then
            echo -e "${GREEN}‚úÖ Instance d√©marr√©e avec succ√®s${NC}"
            echo -e "${GREEN}üåê IP publique: $PUBLIC_IP${NC}"
            echo -e "${GREEN}üé¨ Application: http://$PUBLIC_IP${NC}"
            echo -e "${BLUE}‚è≥ Attendez ~2-3 minutes que les services d√©marrent${NC}"
        else
            echo -e "${GREEN}‚úÖ Instance d√©marr√©e${NC}"
            echo -e "${YELLOW}‚è≥ IP en cours d'assignation...${NC}"
        fi
    else
        echo -e "${RED}‚ùå Erreur lors du d√©marrage${NC}"
    fi
}

# Fonction pour arr√™ter l'instance
stop_instance() {
    echo -e "${YELLOW}üõë Arr√™t de l'instance${NC}"
    echo "===================="
    
    if ! check_terraform; then
        return 1
    fi
    
    INSTANCE_ID=$(get_instance_id)
    if [ $? -ne 0 ]; then
        return 1
    fi
    
    echo "üîÑ Arr√™t en cours..."
    aws ec2 stop-instances --instance-ids $INSTANCE_ID >/dev/null
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Commande d'arr√™t envoy√©e${NC}"
        echo -e "${BLUE}‚è≥ Attente de l'arr√™t complet...${NC}"
        
        aws ec2 wait instance-stopped --instance-ids $INSTANCE_ID
        echo -e "${GREEN}‚úÖ Instance arr√™t√©e avec succ√®s${NC}"
        echo -e "${YELLOW}üí∞ √âconomie: Facturation CPU/RAM arr√™t√©e${NC}"
    else
        echo -e "${RED}‚ùå Erreur lors de l'arr√™t${NC}"
    fi
}

# Fonction pour red√©marrer l'instance
restart_instance() {
    echo -e "${YELLOW}üîÑ Red√©marrage de l'instance${NC}"
    echo "==========================="
    
    stop_instance
    if [ $? -eq 0 ]; then
        echo -e "${BLUE}‚è≥ Attente de 10 secondes...${NC}"
        sleep 10
        start_instance
    fi
}

# Fonction de monitoring rapide
quick_status() {
    if ! check_terraform; then
        return 1
    fi
    
    INSTANCE_ID=$(get_instance_id)
    PUBLIC_IP=$(get_public_ip)
    
    if [ $? -eq 0 ] && [ -n "$PUBLIC_IP" ]; then
        # Test rapide HTTP
        if curl -s --max-time 5 "http://$PUBLIC_IP" >/dev/null; then
            echo -e "${GREEN}‚úÖ Application accessible sur http://$PUBLIC_IP${NC}"
        else
            echo -e "${RED}‚ùå Application non accessible${NC}"
        fi
    fi
}

# Fonction pour afficher les informations Terraform
show_terraform_info() {
    echo -e "${BLUE}üèóÔ∏è Informations Terraform${NC}"
    echo "========================="
    
    if ! check_terraform; then
        return 1
    fi
    
    cd "$TERRAFORM_DIR"
    
    echo -e "${YELLOW}üìä Outputs Terraform:${NC}"
    terraform output 2>/dev/null || echo "Pas d'outputs disponibles"
    
    echo ""
    echo -e "${YELLOW}üìã Ressources d√©ploy√©es:${NC}"
    terraform state list 2>/dev/null | head -10 || echo "√âtat Terraform non accessible"
}

# Menu principal
show_menu() {
    echo -e "${BLUE}======================================${NC}"
    echo -e "${BLUE}üé¨ Gestion MBot - Infrastructure Terraform${NC}"
    echo -e "${BLUE}======================================${NC}"
    echo ""
    echo "1) üîç √âtat de l'instance"
    echo "2) üöÄ D√©marrer l'instance"
    echo "3) üõë Arr√™ter l'instance"
    echo "4) üîÑ Red√©marrer l'instance"
    echo "5) ‚ö° Test rapide d'acc√®s"
    echo "6) üèóÔ∏è Informations Terraform"
    echo "7) üí∞ Estimation des co√ªts"
    echo "0) ‚ùå Quitter"
    echo ""
}

# Estimation des co√ªts
cost_estimation() {
    echo -e "${BLUE}üí∞ Estimation des co√ªts${NC}"
    echo "======================="
    echo ""
    echo "üìä Instance t3.small (eu-west-3) :"
    echo "   - En marche: ~‚Ç¨0.022/heure (~‚Ç¨16/mois)"
    echo "   - Arr√™t√©e: ‚Ç¨0.00/heure"
    echo "   - EBS 20GB: ~‚Ç¨2/mois"
    echo ""
    echo "üí° √âconomies avec start/stop :"
    echo "   - Arr√™t 12h/jour: ~‚Ç¨8/mois √©conomis√©"
    echo "   - Week-end arr√™t√©e: ~‚Ç¨3/mois √©conomis√©"
    echo "   - Usage occasionnel: jusqu'√† ‚Ç¨10/mois √©conomis√©"
    echo ""
    echo "üèóÔ∏è Co√ªt total estim√©: ‚Ç¨18-25/mois selon usage"
}

# Configuration initiale
if ! command -v aws &> /dev/null; then
    echo -e "${RED}‚ùå AWS CLI non trouv√©${NC}"
    echo "Installez et configurez AWS CLI"
    exit 1
fi

# Boucle du menu principal
if [ "$1" = "status" ]; then
    check_instance_status
elif [ "$1" = "start" ]; then
    start_instance
elif [ "$1" = "stop" ]; then
    stop_instance
elif [ "$1" = "restart" ]; then
    restart_instance
elif [ "$1" = "quick" ]; then
    quick_status
else
    # Mode interactif
    while true; do
        show_menu
        read -p "Choisissez une option: " choice
        echo ""
        
        case $choice in
            1) check_instance_status ;;
            2) start_instance ;;
            3) stop_instance ;;
            4) restart_instance ;;
            5) quick_status ;;
            6) show_terraform_info ;;
            7) cost_estimation ;;
            0) echo -e "${GREEN}üëã Gestion termin√©e !${NC}"; exit 0 ;;
            *) echo -e "${RED}‚ùå Option invalide${NC}" ;;
        esac
        
        echo ""
        read -p "Appuyez sur Entr√©e pour continuer..."
        echo ""
    done
fi