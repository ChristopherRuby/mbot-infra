#!/bin/bash
# Script de red√©ploiement pour l'application MBot
# T√©l√©charge et d√©ploie la derni√®re version depuis GitHub

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
TERRAFORM_DIR="$SCRIPT_DIR/../environments/prod"
GITHUB_REPO="https://github.com/ChristopherRuby/mbot.git"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fonction pour obtenir l'IP publique depuis Terraform
get_public_ip() {
    cd "$TERRAFORM_DIR"
    PUBLIC_IP=$(terraform output -raw instance_public_ip 2>/dev/null)
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Impossible de r√©cup√©rer l'IP depuis Terraform${NC}"
        return 1
    fi
    
    echo "$PUBLIC_IP"
    return 0
}

# Fonction pour v√©rifier la connectivit√© SSH
check_ssh() {
    local ip=$1
    local ssh_key="$HOME/.ssh/mbot-key.pem"
    
    if [ ! -f "$ssh_key" ]; then
        echo -e "${RED}‚ùå Cl√© SSH non trouv√©e: $ssh_key${NC}"
        return 1
    fi
    
    ssh -i "$ssh_key" -o ConnectTimeout=10 -o BatchMode=yes ubuntu@$ip exit 2>/dev/null
    return $?
}

# Fonction de red√©ploiement
redeploy() {
    echo -e "${BLUE}üöÄ D√©but du red√©ploiement MBot${NC}"
    echo "================================"
    
    # Obtenir l'IP de l'instance
    echo -e "üîç R√©cup√©ration de l'IP de l'instance..."
    PUBLIC_IP=$(get_public_ip)
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå √âchec de r√©cup√©ration de l'IP${NC}"
        exit 1
    fi
    echo -e "üåê IP de l'instance: ${GREEN}$PUBLIC_IP${NC}"
    
    # V√©rifier la connectivit√© SSH
    echo -e "üîë V√©rification de la connectivit√© SSH..."
    if ! check_ssh "$PUBLIC_IP"; then
        echo -e "${RED}‚ùå Impossible de se connecter en SSH${NC}"
        echo "V√©rifiez que:"
        echo "1. L'instance est en marche"
        echo "2. La cl√© SSH ~/.ssh/mbot-key.pem existe et a les bonnes permissions"
        echo "3. Votre IP est autoris√©e dans le Security Group"
        exit 1
    fi
    echo -e "‚úÖ SSH OK"
    
    # Arr√™ter le service MBot
    echo -e "üõë Arr√™t du service MBot..."
    ssh -i ~/.ssh/mbot-key.pem ubuntu@$PUBLIC_IP "sudo systemctl stop mbot" || {
        echo -e "${YELLOW}‚ö†Ô∏è  Erreur lors de l'arr√™t du service (peut-√™tre d√©j√† arr√™t√©)${NC}"
    }
    
    # Sauvegarder l'ancienne version
    echo -e "üíæ Sauvegarde de l'ancienne version..."
    ssh -i ~/.ssh/mbot-key.pem ubuntu@$PUBLIC_IP "
        sudo -u mbot bash -c 'cd /home/mbot && if [ -d app ]; then mv app app.backup.\$(date +%Y%m%d_%H%M%S); echo \"Sauvegarde cr√©√©e: app.backup.\$(date +%Y%m%d_%H%M%S)\"; else echo \"Aucune version existante √† sauvegarder\"; fi'
    "
    
    # Cloner la nouvelle version
    echo -e "üì• T√©l√©chargement de la derni√®re version depuis GitHub..."
    ssh -i ~/.ssh/mbot-key.pem ubuntu@$PUBLIC_IP "
        sudo -u mbot bash -c 'cd /home/mbot && git clone $GITHUB_REPO app' &&
        echo '‚úÖ Code t√©l√©charg√© avec succ√®s'
    " || {
        echo -e "${RED}‚ùå √âchec du t√©l√©chargement${NC}"
        exit 1
    }
    
    # Installation des d√©pendances
    echo -e "üì¶ Installation des d√©pendances Python..."
    ssh -i ~/.ssh/mbot-key.pem ubuntu@$PUBLIC_IP "
        sudo -u mbot bash -c 'cd /home/mbot/app && python3 -m venv venv && ./venv/bin/pip install --upgrade pip && ./venv/bin/pip install -r requirements.txt' &&
        echo '‚úÖ D√©pendances install√©es'
    " || {
        echo -e "${RED}‚ùå √âchec de l'installation des d√©pendances${NC}"
        exit 1
    }
    
    # Configuration des variables d'environnement
    echo -e "üîß Configuration des variables d'environnement..."
    
    # V√©rifier que les variables TF_VAR sont disponibles
    if [ -z "$TF_VAR_perplexity_api_key" ] || [ -z "$TF_VAR_mongodb_uri" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Variables TF_VAR non trouv√©es, chargement depuis ~/.bashrc...${NC}"
        source ~/.bashrc
    fi
    
    # Cr√©er le fichier .env directement
    ssh -i ~/.ssh/mbot-key.pem ubuntu@$PUBLIC_IP "
        sudo -u mbot tee /home/mbot/app/.env > /dev/null << 'EOF'
PERPLEXITY_API_KEY=$TF_VAR_perplexity_api_key
MONGODB_URI=$TF_VAR_mongodb_uri
MONGODB_DATABASE=sample_mflix
MONGODB_COLLECTION=movies
EOF
        echo '‚úÖ Variables d'environnement configur√©es'
    " || {
        echo -e "${RED}‚ùå √âchec de la configuration${NC}"
        exit 1
    }
    
    # Red√©marrer le service
    echo -e "üîÑ Red√©marrage du service MBot..."
    ssh -i ~/.ssh/mbot-key.pem ubuntu@$PUBLIC_IP "
        sudo systemctl start mbot &&
        sleep 3 &&
        sudo systemctl status mbot --no-pager
    " || {
        echo -e "${RED}‚ùå √âchec du red√©marrage du service${NC}"
        exit 1
    }
    
    # V√©rifier que l'application r√©pond
    echo -e "üåê V√©rification de l'application..."
    sleep 5
    
    if curl -f -s -o /dev/null http://$PUBLIC_IP; then
        echo -e "${GREEN}‚úÖ Red√©ploiement r√©ussi !${NC}"
        echo -e "üé¨ Application accessible: ${GREEN}http://$PUBLIC_IP${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Service d√©marr√© mais l'application peut mettre quelques secondes √† r√©pondre${NC}"
        echo -e "üé¨ URL: http://$PUBLIC_IP"
    fi
    
    echo ""
    echo -e "${BLUE}üìã Actions post-d√©ploiement recommand√©es:${NC}"
    echo "1. V√©rifier les logs: ./scripts/monitoring.sh logs"
    echo "2. Tester l'application dans le navigateur"
    echo "3. V√©rifier la connexion MongoDB Atlas si probl√®me"
}

# Fonction d'aide
show_help() {
    echo -e "${BLUE}üöÄ Script de red√©ploiement MBot${NC}"
    echo ""
    echo "Usage: $0 [option]"
    echo ""
    echo "Options:"
    echo "  deploy    - Red√©ployer l'application (par d√©faut)"
    echo "  status    - V√©rifier l'√©tat de l'application"
    echo "  rollback  - Revenir √† la version pr√©c√©dente"
    echo "  help      - Afficher cette aide"
    echo ""
    echo "Exemples:"
    echo "  $0                # Red√©ploiement"
    echo "  $0 deploy         # Red√©ploiement explicite"
    echo "  $0 status         # √âtat de l'application"
    echo "  $0 rollback       # Rollback vers version pr√©c√©dente"
}

# Fonction de rollback
rollback() {
    echo -e "${YELLOW}üîÑ Rollback vers la version pr√©c√©dente${NC}"
    
    PUBLIC_IP=$(get_public_ip)
    if [ $? -ne 0 ]; then exit 1; fi
    
    # Trouver la derni√®re sauvegarde
    BACKUP_DIR=$(ssh -i ~/.ssh/mbot-key.pem ubuntu@$PUBLIC_IP "
        sudo -u mbot bash -c 'cd /home/mbot && ls -1d app.backup.* 2>/dev/null | sort -r | head -n1'
    ")
    
    if [ -z "$BACKUP_DIR" ]; then
        echo -e "${RED}‚ùå Aucune sauvegarde trouv√©e${NC}"
        exit 1
    fi
    
    echo -e "üì¶ Restauration depuis: $BACKUP_DIR"
    
    ssh -i ~/.ssh/mbot-key.pem ubuntu@$PUBLIC_IP "
        sudo systemctl stop mbot &&
        sudo -u mbot bash -c 'cd /home/mbot && rm -rf app && mv $BACKUP_DIR app' &&
        sudo systemctl start mbot
    "
    
    echo -e "${GREEN}‚úÖ Rollback termin√©${NC}"
}

# Fonction de status
show_status() {
    PUBLIC_IP=$(get_public_ip)
    if [ $? -ne 0 ]; then exit 1; fi
    
    echo -e "${BLUE}üìä √âtat de l'application MBot${NC}"
    echo "=========================="
    
    # Status du service
    SERVICE_STATUS=$(ssh -i ~/.ssh/mbot-key.pem ubuntu@$PUBLIC_IP "systemctl is-active mbot 2>/dev/null || echo 'inactive'")
    if [ "$SERVICE_STATUS" = "active" ]; then
        echo -e "ü§ñ Service MBot: ${GREEN}ACTIF${NC}"
    else
        echo -e "ü§ñ Service MBot: ${RED}INACTIF${NC}"
    fi
    
    # Test HTTP
    if curl -f -s -o /dev/null --max-time 10 http://$PUBLIC_IP; then
        echo -e "üåê Application web: ${GREEN}ACCESSIBLE${NC}"
    else
        echo -e "üåê Application web: ${RED}INACCESSIBLE${NC}"
    fi
    
    echo -e "üîó URL: http://$PUBLIC_IP"
    
    # Version du commit (si disponible)
    COMMIT=$(ssh -i ~/.ssh/mbot-key.pem ubuntu@$PUBLIC_IP "sudo -u mbot bash -c 'cd /home/mbot/app && git rev-parse --short HEAD 2>/dev/null' || echo 'N/A'")
    echo -e "üìù Version: $COMMIT"
}

# Point d'entr√©e principal
case "${1:-deploy}" in
    "deploy")
        redeploy
        ;;
    "status")
        show_status
        ;;
    "rollback")
        rollback
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    *)
        echo -e "${RED}‚ùå Option inconnue: $1${NC}"
        show_help
        exit 1
        ;;
esac